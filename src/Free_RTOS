// #include <Arduino.h>
// int count1 = 0;
// int count2 = 0;

// void toggleLED(void * parameter){
//   for(;;){ // infinite loop

//     // Turn the LED on
//     digitalWrite(LED_BUILTIN, HIGH);
//     // Pause the task for 500ms
//     vTaskDelay(500 / portTICK_PERIOD_MS);

//     // Turn the LED off
//     digitalWrite(LED_BUILTIN, LOW);

//     // Pause the task again for 500ms
//     vTaskDelay(500 / portTICK_PERIOD_MS);
//   }
// }

// void uploadToAWS(void * parameter){
//     // Implement your custom logic here

//     // When you're done, call vTaskDelete. Don't forget this!
//     vTaskDelete(NULL);
// }
// // This TaskHandle will allow 
// TaskHandle_t task1Handle = NULL;
// void task1(void * parameter){
//   for(;;){
//     Serial.print("Task 1 counter");
//     Serial.println(count1++);
//     vTaskDelay(1000 / portTICK_PERIOD_MS);
//   }
// }
// // This TaskHandle will allow 
// TaskHandle_t task2Handle = NULL;
// void task2(void * parameter){
//   for(;;){
//     Serial.print("Task 2 counter");
//     Serial.println(count2++);
//     vTaskDelay(1000 / portTICK_PERIOD_MS);
//   }
// }

// void setup(){ 
//   Serial.begin(115200);
//   pinMode(LED_BUILTIN, OUTPUT);

//   xTaskCreate(
//       task1,
//       "Task 1",
//       1000,
//       NULL,
//       1,
//       &task1Handle            // Task handle
//   );
//   xTaskCreate(
//       task2,
//       "Task 2",
//       1000,
//       NULL,
//       1,
//       &task2Handle            // Task handle
//   );

//   xTaskCreate(
//     toggleLED,    // Function that should be called
//     "Toggle LED",   // Name of the task (for debugging)
//     1000,            // Stack size (bytes)
//     NULL,            // Parameter to pass
//     1,               // Task priority
//     NULL             // Task handle
//   );  
//   xTaskCreate(
//       uploadToAWS,    // Function that should be called
//       "Upload to AWS",  // Name of the task (for debugging)
//       1000,            // Stack size (bytes)
//       NULL,            // Parameter to pass
//       1,               // Task priority
//       NULL             // Task handle
//   );
//   vTaskDelete(NULL);
// }

// void loop() {

// }